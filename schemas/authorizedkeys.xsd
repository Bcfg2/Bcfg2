<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:py="http://genshi.edgewall.org/" xml:lang="en">
  <xsd:annotation>
    <xsd:documentation>
      Schema for :ref:`server-plugins-generators-cfg-sshkeys`
      ``authorizedkeys.xml``
    </xsd:documentation>
  </xsd:annotation>

  <xsd:import namespace="http://genshi.edgewall.org/"
              schemaLocation="genshi.xsd"/>

  <xsd:complexType name="AuthorizedKeysGroupType">
    <xsd:annotation>
      <xsd:documentation>
        An **AuthorizedKeysGroupType** is a tag used to provide logic.
        Child entries of an AuthorizedKeysGroupType tag only apply to
        machines that match the condition specified -- either
        membership in a group, or a matching client name.
        :xml:attribute:`AuthorizedKeysGroupType:negate` can be set to
        negate the sense of the match.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:choice minOccurs="1" maxOccurs="unbounded">
      <xsd:group ref="py:genshiElements"/>
      <xsd:element name="Allow" type="AllowType"/>
      <xsd:element name="Group" type="AuthorizedKeysGroupType"/>
      <xsd:element name="Client" type="AuthorizedKeysGroupType"/>
      <xsd:element name="AuthorizedKeys" type="AuthorizedKeysType"/>
    </xsd:choice>
    <xsd:attribute name='name' type='xsd:string'>
      <xsd:annotation>
        <xsd:documentation>
          The name of the client or group to match on.  Child entries
          will only apply to this client or group (unless
          :xml:attribute:`AuthorizedKeysGroupType:negate` is set).
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name='negate' type='xsd:boolean'>
      <xsd:annotation>
        <xsd:documentation>
          Negate the sense of the match, so that child entries only
          apply to a client if it is not a member of the given group
          or does not have the given name.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attributeGroup ref="py:genshiAttrs"/>
  </xsd:complexType>

  <xsd:complexType name="AllowType" mixed="true">
    <xsd:annotation>
      <xsd:documentation>
        Allow access from a public key, given either as text content,
        or described by the attributes.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:choice minOccurs="0" maxOccurs="unbounded">
      <xsd:group ref="py:genshiElements"/>
      <xsd:element name="Params" type="AuthorizedKeysParamsType"/>
    </xsd:choice>
    <xsd:attribute name="from" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation>
          The path of the public key to allow.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="group" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation>
          Use a public key specific to the given group, instead of the
          public key specific to the appropriate category group of the
          current client.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="host" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation>
          Use a public key specific to the given host.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attributeGroup ref="py:genshiAttrs"/>
  </xsd:complexType>

  <xsd:complexType name="AuthorizedKeysParamsType">
    <xsd:annotation>
      <xsd:documentation>
        Specify parameters for public key authentication and
        connection.  See :manpage:`sshd(8)` for details on allowable
        parameters.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attributeGroup ref="py:genshiAttrs"/>
    <xsd:anyAttribute processContents="lax"/>
  </xsd:complexType>

  <xsd:complexType name="AuthorizedKeysType">
    <xsd:annotation>
      <xsd:documentation>
        Top-level tag for describing a generated SSH key pair.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:choice minOccurs="1" maxOccurs="unbounded">
      <xsd:group ref="py:genshiElements"/>
      <xsd:element name="Allow" type="AllowType"/>
      <xsd:element name="Group" type="AuthorizedKeysGroupType"/>
      <xsd:element name="Client" type="AuthorizedKeysGroupType"/>
      <xsd:element name="AuthorizedKeys" type="AuthorizedKeysType"/>
    </xsd:choice>
    <xsd:attributeGroup ref="py:genshiAttrs"/>
  </xsd:complexType>

  <xsd:element name="AuthorizedKeys" type="AuthorizedKeysType"/>
</xsd:schema>
