#!/usr/bin/env python

"""This tool verifies that all clients known to the server build without failures"""

import sys
from sets import Set
from Bcfg2.metargs import Option
import Bcfg2.Server.Core
import Bcfg2.Options
from nose.core import TestProgram
from nose.suite import LazySuite
from unittest import TestCase

class ClientTest(TestCase):
    """
    A test case representing the build of all of the configuration for a single host.
    Checks that none of the build config entities has had a failure when it is building.
    Optionally ignores some config files that we know will cause errors (because they
    are private files we don't have access to, for instance)
    """
    __test__ = False # Do not collect

    def __init__(self, bcfg2_core, client, ignore_entries=[]):
        TestCase.__init__(self)
        self.bcfg2_core = bcfg2_core
        self.client = client
        self.ignore_entries = Set(ignore_entries)

    def runTest(self):
        config = self.bcfg2_core.BuildConfiguration(self.client)

        def skip_failure(failure):
            return ":".join((failure.tag, failure.attrib.get('name'))) in self.ignore_entries
        failures = [failure
            for failure
            in config.xpath('//*[@failure]')
            if not skip_failure(failure)]


        def format_failure(failure):
            return "%s(%s): %s" % (
                failure.tag,
                failure.attrib.get('name'),
                failure.attrib.get('failure')
            )

        assert len(failures) == 0, "Failures:\n%s" % "\n".join(
            [format_failure(failure) for failure in failures]
        )
    
    def __str__(self):
        return "ClientTest(%s)" % self.client

    id = __str__

def main():
    
    Bcfg2.Options.add_options(
        Option('--ignore-entries', 'bcfg2_test:ignore_entries', nargs='*',
            default=[],
            help='Ignore these entries if they fail to build. Format is '
                 '<EntryType>:<name>')
    )
    Bcfg2.Server.Core.Core.register_options()
    Bcfg2.Options.set_help(
        "Build all clients, and test that there are no failures",
        "Any unknown options will be passed verbatim to nosetests under the hood"
    )

    args, rest = Bcfg2.Options.known_args()

    def run_tests():
        core = Bcfg2.Server.Core.Core.from_config(args)
        core.fam.handle_events_in_interval(0.1)
        for client in core.metadata.clients:
            yield ClientTest(core, client, args.ignore_entries)

    TestProgram(argv=sys.argv[0:1]+rest, suite=LazySuite(run_tests))

if __name__ == "__main__":
    sys.exit(main())
