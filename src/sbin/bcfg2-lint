#!/usr/bin/env python

"""This tool examines your Bcfg2 specifications for errors."""
__revision__ = '$Revision$'

import sys
import inspect
import logging
from metargs import Option
import Bcfg2.Logger
import Bcfg2.Options
import Bcfg2.Server.Core
import Bcfg2.Server.Lint
# Compatibility imports
from Bcfg2.Bcfg2Py3k import ConfigParser
from Bcfg2.PluginLoader import load_exactly_one, MultipleEntriesError, NoEntriesError


BCFG2_LINT_ENTRYPOINT = 'bcfg2.lint'

logger = logging.getLogger('bcfg2-lint')

def run_serverless_plugins(plugins, config=None, args=None, errorhandler=None):
    logger.debug("Running serverless plugins")
    for plugin_name, plugin in list(plugins.items()):
        run_plugin(plugin, plugin_name, errorhandler=errorhandler,
                   args=args, config=config, files=files)

def run_server_plugins(plugins, config=None, args=None, errorhandler=None):
    core = load_server(args)
    logger.debug("Running server plugins")
    for plugin_name, plugin in list(plugins.items()):
        run_plugin(plugin, plugin_name, plugin_args=[core], errorhandler=errorhandler,
                   args=args, config=config, files=files)

def run_plugin(plugin, plugin_name, plugin_args=None, errorhandler=None,
               args=None, config=None, files=None):
    logger.debug("  Running %s" % plugin_name)
    if plugin_args is None:
        plugin_args = []

    if errorhandler is None:
        errorhandler = get_errorhandler(config)

    if config is not None and config.has_section(plugin_name):
        for key, val in config.items(plugin_name):
            setattr(args, key, val)
    plugin_args.append(args)
        
    # older versions of python do not support mixing *-magic and
    # non-*-magic (e.g., "plugin(*args, files=files)", so we do this
    # all with *-magic
    kwargs = dict(files=files, errorhandler=errorhandler)
    
    return plugin(*plugin_args, **kwargs).Run()

def get_errorhandler(config):
    """ get a Bcfg2.Server.Lint.ErrorHandler object """
    if config.has_section("errors"):
        conf = dict(config.items("errors"))
    else:
        conf = None
    return Bcfg2.Server.Lint.ErrorHandler(config=conf)

def load_server(args):
    """ load server """
    core = Bcfg2.Server.Core.Core.from_config(args)
    if args.debug:
        core.fam.debug = True
    core.fam.handle_events_in_interval(4)
    return core

if __name__ == '__main__':
    Bcfg2.Options.add_options(
        Bcfg2.Options.VERBOSE,
        Bcfg2.Options.DEBUG,
        Bcfg2.Options.FILES_ON_STDIN,
        Option('--lint-config', default='/etc/bcfg2-lint.conf', 
               help='Specify bcfg2-lint configuration file'),
        Option('--list-errors', action='store_true',
               help='Show error handling'),
        Option('plugins', nargs='*', help='Plugins to run'),
    )
    Bcfg2.Server.Core.Core.register_options()
    bootstrap_args = Bcfg2.Options.bootstrap()

    log_args = dict(to_syslog=False, to_console=logging.WARNING)
    if bootstrap_args.verbose:
        log_args['to_console'] = logging.DEBUG
    Bcfg2.Logger.setup_logging('bcfg2-info', **log_args)

    config = ConfigParser.SafeConfigParser()
    config.read(bootstrap_args.config)
    config.read(bootstrap_args.lint_config)

    # get list of plugins to run
    if bootstrap_args.plugins:
        allplugins = bootstrap_args.plugins
    elif "bcfg2-repo-validate" in sys.argv[0]:
        allplugins = ['Duplicates', 'RequiredAttrs' 'Validate']
    else:
        try:
            allplugins = config.get('lint', 'plugins').split(',')
        except (ConfigParser.NoOptionError, ConfigParser.NoSectionError):
            allplugins = Bcfg2.Server.Lint.__all__

    for plugin in allplugins:
        try:
            plugin_cls = load_exactly_one(BCFG2_LINT_ENTRYPOINT, plugin)
            plugin_cls.register_options()
        except:
            pass

    args = Bcfg2.Options.args()

    if args.list_errors:
        if config.has_section("errors"):
            econf = dict(config.items("errors"))
        else:
            econf = dict()

        print("%-35s %-35s" % ("Error name", "Handler (Default)"))
        for err, default in Bcfg2.Server.Lint.ErrorHandler._errors.items():
            if err in econf and econf[err] != default:
                handler = "%s (%s)" % (econf[err], default)
            else:
                handler = default
            print("%-35s %-35s" % (err, handler))
        raise SystemExit(0)

    if args.stdin:
        files = [s.strip() for s in sys.stdin.readlines()]
    else:
        files = None

    # load plugins
    serverplugins = {}
    serverlessplugins = {}
    for plugin_name in allplugins:
        try:
            plugin = load_exactly_one(BCFG2_LINT_ENTRYPOINT, plugin_name)
        except (MultipleEntriesError, NoEntriesError):
            logger.exception("Failed to load plugin %s" % plugin_name)
            raise SystemExit(1)
        if [c for c in inspect.getmro(plugin)
            if c == Bcfg2.Server.Lint.ServerPlugin]:
            serverplugins[plugin_name] = plugin
        else:
            serverlessplugins[plugin_name] = plugin

    errorhandler = get_errorhandler(config)

    run_serverless_plugins(serverlessplugins,
                           errorhandler=errorhandler,
                           config=config, args=args)

    if serverplugins:
        if errorhandler.errors:
            # it would be swell if we could try to start the server
            # even if there were errors with the serverless plugins,
            # but since XML parsing errors occur in the FAM thread
            # (not in the core server thread), there's no way we can
            # start the server and try to catch exceptions --
            # bcfg2-lint isn't in the same stack as the exceptions.
            # so we're forced to assume that a serverless plugin error
            # will prevent the server from starting
            print("Serverless plugins encountered errors, skipping server "
                  "plugins")
        else:
            run_server_plugins(serverplugins, errorhandler=errorhandler,
                               config=config, args=args)

    if errorhandler.errors or errorhandler.warnings or args.verbose:
        print("%d errors" % errorhandler.errors)
        print("%d warnings" % errorhandler.warnings)

    if errorhandler.errors:
        raise SystemExit(2)
    elif errorhandler.warnings:
        raise SystemExit(3)
