#!/usr/bin/env python

"""This tool loads the Bcfg2 core into an interactive debugger."""
__revision__ = '$Revision$'

from code import InteractiveConsole
import cmd
import getopt
import logging
import lxml.etree
import os
import sys
import tempfile
from Bcfg2.metargs import Option

try:
    try:
        import cProfile as profile
    except:
        import profile
    import pstats
    have_profile = True
except:
    have_profile = False

import Bcfg2.Logger
import Bcfg2.Options
import Bcfg2.Server.Core
import Bcfg2.Server.Plugins.Metadata
import Bcfg2.Server.Plugins.SGenshi
import Bcfg2.Server.Plugin

logger = logging.getLogger('bcfg2-info')
USAGE = """Commands:
build <hostname> <filename> - Build config for hostname, writing to filename
builddir <hostname> <dirname> - Build config for hostname, writing separate files to dirname
buildall <directory> - Build configs for all clients in directory
buildfile <filename> <hostname> - Build config file for hostname (not written to disk)
buildbundle <bundle> <hostname> - Render a templated bundle for hostname (not written to disk)
bundles - Print out group/bundle information
clients - Print out client/profile information
config - Print out the configuration of the Bcfg2 server
debug - Shell out to native python interpreter
event_debug - Display filesystem events as they are processed
groups - List groups
help - Print this list of available commands
mappings <type*> <name*> - Print generator mappings for optional type and name
packageresolve <hostname> <package> [<package>...] - Resolve the specified set of packages
packagesources - Show package sources
profile <command> <args> - Profile a single bcfg2-info command
quit - Exit the bcfg2-info command line
showentries <hostname> <type> - Show abstract configuration entries for a given host
showclient <client1> <client2> - Show metadata for given hosts
update - Process pending file events
version - Print version of this tool"""

BUILDDIR_USAGE = """Usage: builddir [-f] <hostname> <output dir>

Generates a config for client <hostname> and writes the
individual configuration files out separately in a tree
under <output dir>.  The <output dir> directory must be
rooted under /tmp unless the -f argument is provided, in
which case it can be located anywhere.

NOTE: Currently only handles file entries and writes
all content with the default owner and permissions.  These
could be much more permissive than would be created by the
Bcfg2 client itself."""


class mockLog(object):
    def error(self, *args, **kwargs):
        pass

    def info(self, *args, **kwargs):
        pass

    def debug(self, *args, **kwargs):
        pass

class dummyError(Exception):
    """This is just a dummy."""
    pass

class FileNotBuilt(Exception):
    """Thrown when File entry contains no content."""
    def __init__(self, value):
        Exception.__init__(self)
        self.value = value
    def __str__(self):
        return repr(self.value)

def printTabular(rows):
    """Print data in tabular format."""
    cmax = tuple([max([len(str(row[index])) for row in rows]) + 1 \
                    for index in range(len(rows[0]))])
    fstring = (" %%-%ss |" * len(cmax)) % cmax
    fstring = ('|'.join([" %%-%ss "] * len(cmax))) % cmax
    print(fstring % rows[0])
    print((sum(cmax) + (len(cmax) * 2) + (len(cmax) - 1)) * '=')
    for row in rows[1:]:
        print(fstring % row)

def displayTrace(trace, num=80, sort=('time', 'calls')):
    stats = pstats.Stats(trace)
    stats.sort_stats('cumulative', 'calls', 'time')
    stats.print_stats(200)

class infoCore(cmd.Cmd, Bcfg2.Server.Core.Core):
    """Main class for bcfg2-info."""

    def __init__(self, event_debug, core_args):
        cmd.Cmd.__init__(self)
        try:
            self.core = Bcfg2.Server.Core.Core.from_config(core_args)
            if event_debug:
                self.core.fam.debug = True
        except Bcfg2.Server.Core.CoreInitError:
            msg = sys.exc_info()[1]
            print("Core load failed because %s" % msg)
            raise SystemExit(1)
        self.prompt = '> '
        self.cont = True
        self.core.fam.handle_events_in_interval(4)
        self.core_args = core_args

    def do_loop(self):
        """Looping."""
        self.cont = True
        while self.cont:
            try:
                self.cmdloop('Welcome to bcfg2-info\n'
                             'Type "help" for more information')
            except SystemExit:
                raise
            except Bcfg2.Server.Plugin.PluginExecutionError:
                continue
            except KeyboardInterrupt:
                print("Ctrl-C pressed exiting...")
                self.do_exit([])
            except dummyError:
                continue
            except:
                logger.exception("Command failure")

    def do_debug(self, args):
        """Debugging mode for more details."""
        try:
            opts, _ = getopt.getopt(args.split(), 'nf:')
        except:
            print("Usage: debug [-n] [-f <command list>]")
            return
        self.cont = False
        scriptmode = False
        interactive = True
        for opt in opts:
            if opt[0] == '-f':
                scriptmode = True
                spath = opt[1]
            elif opt[0] == '-n':
                interactive = False
        sh = InteractiveConsole(locals())
        if scriptmode:
            for command in [c.strip() for c in open(spath).readlines()]:
                if command:
                    sh.push(command)
        if interactive:
            print("Dropping to python interpreter; press ^D to resume")
            try:
                import IPython
                shell = IPython.Shell.IPShell(argv=[], user_ns=locals())
                shell.mainloop()
            except ImportError:
                sh.interact()

    def do_quit(self, _):
        """
           Exit program.
           Usage: [quit|exit]
        """
        for plugin in list(self.core.plugins.values()):
            plugin.shutdown()
        os._exit(0)

    do_EOF = do_quit
    do_exit = do_quit

    def do_help(self, _):
        """Print out usage info."""
        print(USAGE)

    def do_update(self, _):
        """Process pending filesystem events."""
        self.core.fam.handle_events_in_interval(0.1)

    def do_version(self, _):
        """Print out code version."""
        print(__revision__)

    def do_build(self, args):
        """Build client configuration."""
        alist = args.split()
        path_force = False
        for arg in alist:
            if arg == '-f':
                alist.remove('-f')
                path_force = True
        if len(alist) == 2:
            client, ofile = alist
            if not ofile.startswith('/tmp') and not path_force:
                print("Refusing to write files outside of /tmp without -f option")
                return
            lxml.etree.ElementTree(self.core.BuildConfiguration(client)).write(ofile,
                                       encoding='UTF-8', xml_declaration=True,
                                       pretty_print=True)
        else:
            print('Usage: build [-f] <hostname> <output file>')

    def help_builddir(self):
        """Display help for builddir command."""
        print(BUILDDIR_USAGE)

    def do_builddir(self, args):
        """Build client configuration as separate files within a dir."""
        alist = args.split()
        path_force = False
        if '-f' in args:
            alist.remove('-f')
            path_force = True
        if len(alist) == 2:
            client, odir = alist
            if not odir.startswith('/tmp') and not path_force:
                print("Refusing to write files outside of /tmp without -f option")
                return
            client_config = self.core.BuildConfiguration(client)
            if client_config.tag == 'error':
                print("Building client configuration failed.")
                return

            for struct in client_config:
                for entry in struct:
                    if entry.tag == 'Path':
                        entry.set('name', odir + '/' + entry.get('name'))

            log = mockLog()
            import Bcfg2.Client.Tools.POSIX
            p = Bcfg2.Client.Tools.POSIX.POSIX(log, self.core_args, client_config)
            states = dict()
            p.Inventory(states)
            p.Install(list(states.keys()), states)
        else:
            print('Error: Incorrect number of parameters.')
            self.help_builddir()

    def do_buildall(self, args):
        if len(args.split()) != 1:
            print("Usage: buildall <directory>")
            return
        try:
            os.mkdir(args)
        except:
            pass
        for client in self.core.metadata.clients:
            self.do_build("%s %s/%s.xml" % (client, args, client))

    def do_buildfile(self, args):
        """Build a config file for client."""
        usage = 'Usage: buildfile [--altsrc=<altsrc>] filename hostname'
        try:
            opts, alist = getopt.gnu_getopt(args.split(), '', ['altsrc='])
        except:
            print(usage)
            return
        altsrc = None
        for opt in opts:
            if opt[0] == '--altsrc':
                altsrc = opt[1]
        if len(alist) == 2:
            fname, client = alist
            entry = lxml.etree.Element('Path', type='file', name=fname)
            if altsrc:
                entry.set("altsrc", altsrc)
            try:
                metadata = self.core.build_metadata(client)
                self.core.Bind(entry, metadata)
                print(lxml.etree.tostring(entry, encoding="UTF-8",
                                          xml_declaration=True))
            except:
                logger.exception("Failed to build entry %s for host %s" % (fname, client))
                print("Failed to build entry %s for host %s" % (fname, client))
        else:
            print(usage)

    def do_buildbundle(self, args):
        """Render a bundle for client."""
        if len(args.split()) == 2:
            bname, client = args.split()
            try:
                metadata = self.core.build_metadata(client)
                if bname in self.core.plugins['Bundler'].entries:
                    bundle = self.core.plugins['Bundler'].entries[bname]
                    if isinstance(bundle,
                                  Bcfg2.Server.Plugins.SGenshi.SGenshiTemplateFile):
                        stream = bundle.template.generate(metadata=metadata)
                        print(stream.render("xml"))
                    else:
                        print(bundle.data)
                else:
                    print("No such bundle %s" % bname)
            except:
                err = sys.exc_info()[1]
                print("Failed to render bundle %s for host %s: %s" % (bname,
                                                                      client,
                                                                      err))
        else:
            print('Usage: buildbundle filename hostname')

    def do_bundles(self, _):
        """Print out group/bundle info."""
        data = [('Group', 'Bundles')]
        groups = list(self.core.metadata.groups.keys())
        groups.sort()
        for group in groups:
            data.append((group,
                         ','.join(self.core.metadata.groups[group][0])))
        printTabular(data)

    def do_clients(self, _):
        """Print out client info."""
        data = [('Client', 'Profile')]
        clist = list(self.core.metadata.clients.keys())
        clist.sort()
        for client in clist:
            data.append((client, self.core.metadata.clients[client]))
        printTabular(data)

    def do_config(self, _):
        """Print out the current configuration of Bcfg2."""
        output = [
                ('Description', 'Value'),
                ('Path Bcfg2 repository', self.core_args.repository_path),
                ('Plugins', self.core_args.server_plugins),
                ('Password', self.core_args.password),
                ('Server Metadata Connector', self.core_args.server_connectors),
                ('Filemonitor', self.core_args.server_filemonitor),
                ('Server address', self.core_args.server_location),
                ('Static', self.core_args.components_static_port),
                ('Path to key', self.core_args.ssl_key),
                ('Path to SSL certificate', self.core_args.ssl_cert),
                ('Path to SSL CA certificate', self.core_args.ca_cert),
                ('Protocol', self.core_args.communication_protocol),
                ('Logging', self.core_args.log_path)
                ]
        printTabular(output)

    def do_showentries(self, args):
        """Show abstract configuration entries for a given host."""
        arglen = len(args.split())
        if arglen not in [1, 2]:
            print("Usage: showentries <hostname> <type>")
            return
        client = args.split()[0]
        try:
            meta = self.core.build_metadata(client)
        except Bcfg2.Server.Plugins.Metadata.MetadataConsistencyError:
            print("Unable to find metadata for host %s" % client)
            return
        structures = self.core.GetStructures(meta)
        output = [('entrytype', 'name')]
        if arglen == 1:
            for item in structures:
                for child in item.getchildren():
                    output.append((child.tag, child.get('name')))
        if arglen == 2:
            etype = args.split()[1]
            for item in structures:
                for child in item.getchildren():
                    if child.tag in [etype, "Bound%s" % etype]:
                        output.append((child.tag, child.get('name')))
        printTabular(output)

    def do_groups(self, _):
        """Print out group info."""
        data = [("Groups", "Profile", "Category", "Contains")]
        grouplist = list(self.core.metadata.groups.keys())
        grouplist.sort()
        for group in grouplist:
            if group in self.core.metadata.profiles:
                prof = 'yes'
            else:
                prof = 'no'
            if group in self.core.metadata.categories:
                cat = self.core.metadata.categories[group]
            else:
                cat = ''
            gdata = [grp for grp in self.core.metadata.groups[group][1]]
            if group in gdata:
                gdata.remove(group)
            data.append((group, prof, cat, ','.join(gdata)))
        printTabular(data)

    def do_showclient(self, args):
        """Print host metadata."""
        data = [('Client', 'Profile', "Groups", "Bundles")]
        if not len(args):
            print("Usage:\nshowclient <client> ... <clientN>")
            return
        for client in args.split():
            try:
                client_meta = self.core.build_metadata(client)
            except:
                print("Client %s not defined" % client)
                continue
            print("Hostname:\t%s" % client_meta.hostname)
            print("Profile:\t%s" % client_meta.profile)
            print("Groups:\t\t%s" % list(client_meta.groups)[0])
            for grp in list(client_meta.groups)[1:]:
                print("\t\t%s" % grp)
            if client_meta.bundles:
                print("Bundles:\t%s" % list(client_meta.bundles)[0])
            for bnd in list(client_meta.bundles)[1:]:
                print("\t\t%s" % bnd)
            if client_meta.connectors:
                print("Connector data")
                print("=" * 80)
                for conn in client_meta.connectors:
                    if getattr(client_meta, conn):
                        print("%s:\t%s" % (conn, getattr(client_meta, conn)))
                        print("=" * 80)

    def do_mappings(self, args):
        """Print out mapping info."""
        # Dump all mappings unless type specified
        data = [('Plugin', 'Type', 'Name')]
        arglen = len(args.split())
        for generator in self.core.generators:
            if arglen == 0:
                etypes = list(generator.Entries.keys())
            else:
                etypes = [args.split()[0]]
            if arglen == 2:
                interested = [(etype, [args.split()[1]])
                              for etype in etypes]
            else:
                interested = [(etype, generator.Entries[etype])
                              for etype in etypes
                              if etype in generator.Entries]
            for etype, names in interested:
                for name in [name for name in names if name in
                             generator.Entries.get(etype, {})]:
                    data.append((generator.name, etype, name))
        printTabular(data)

    def do_event_debug(self, args):
        self.core.fam.debug = True

    def do_cfgdebug(self, args):
        try:
            meta = self.core.build_metadata(args)
        except Bcfg2.Server.Plugins.Metadata.MetadataConsistencyError:
            print("Unable to find metadata for host %s" % args)
            return
        structures = self.core.GetStructures(meta)
        for clist in [struct.findall('Path') for struct in structures]:
            for cfile in clist:
                if cfile.get('name') in \
                        self.core.plugins['Cfg'].Entries['ConfigFile']:
                    cset = self.core.plugins['Cfg'].entries[cfile.get('name')]
                    cand = cset.get_matching(meta)
                    fields = ['all', 'group']
                    while len(cand) > 1 and fields:
                        field = fields.pop(0)
                        [cand.remove(c) for c in cand[:]
                         if getattr(c.specific, field)]
                    if len(cand) != 1:
                        sys.stderr.write("Entry %s failed" % cfile.get('name'))
                        continue
                    print(cand[0].name)

    def do_packageresolve(self, args):
        arglist = args.split(" ")
        if len(arglist) < 2:
            print("Usage: packageresolve <hostname> <package> [<package>...]")
            return

        hostname = arglist[0]
        initial = arglist[1:]
        metadata = self.core.build_metadata(hostname)
        self.core.plugins['Packages'].toggle_debug()
        collection = self.core.plugins['Packages']._get_collection(metadata)
        packages, unknown = collection.complete(initial)
        newpkgs = list(packages.difference(initial))
        print("%d initial packages" % len(initial))
        print("    %s" % "\n    ".join(initial))
        print("%d new packages added" % len(newpkgs))
        if newpkgs:
            print("    %s" % "\n    ".join(newpkgs))
        print("%d unknown packages" % len(unknown))
        if unknown:
            print("    %s" % "\n    ".join(unknown))

    def do_packagesources(self, args):
        try:
            metadata = self.core.build_metadata(args)
        except Bcfg2.Server.Plugins.Metadata.MetadataConsistencyError:
            print("Unable to build metadata for host %s" % args)
            return
        collection = self.core.plugins['Packages']._get_collection(metadata)
        for source in collection.sources:
            # get_urls() loads url_map as a side-effect
            source.get_urls()
            for url_map in source.url_map:
                if url_map['arch'] in metadata.groups:
                    reponame = source.get_repo_name(url_map)
                    print("Name: %s" % reponame)
                    print("  Type: %s" % source.ptype)
                    print("  URL: %s" % url_map['url'])
                    if source.gpgkeys:
                        print("  GPG Key(s): %s" % ", ".join(source.gpgkeys))
                    else:
                        print("  GPG Key(s): None")
                    if len(source.blacklist):
                        print("  Blacklist: %s" % ", ".join(source.blacklist))
                    if len(source.whitelist):
                        print("  Whitelist: %s" % ", ".join(source.whitelist))
                    print("")
        
    def do_profile(self, arg):
        """."""
        if not have_profile:
            print("Profiling functionality not available.")
            return
        tracefname = tempfile.mktemp()
        p = profile.Profile()
        p.runcall(self.onecmd, arg)
        displayTrace(p)

    def Run(self, args):
        """."""
        if args:
            self.onecmd(" ".join(args))
            os._exit(0)
        else:
            self.do_loop()

if __name__ == '__main__':
    Bcfg2.Options.add_options(
        Bcfg2.Options.CORE_PROFILE,
        Bcfg2.Options.DEBUG,
        Bcfg2.Options.LOGGING_FILE_PATH,
        Bcfg2.Options.SERVER_CERT,
        Bcfg2.Options.SERVER_KEY,
        Bcfg2.Options.SERVER_LOCATION,
        Bcfg2.Options.SERVER_MCONNECT,
        Bcfg2.Options.SERVER_PROTOCOL,
        Bcfg2.Options.SERVER_STATIC,
    )
    Bcfg2.Server.Core.Core.register_options()
    Bcfg2.Options.add_option(Option('command', nargs='*', help='Command to run'))

    args = Bcfg2.Options.args()

    Bcfg2.Logger.setup_logging('bcfg2',
                               to_syslog=False,
                               to_console=True,
                               level=logging.ERROR,
                               to_file=args.log_path)

    if args.profile and have_profile:
        prof = profile.Profile()
        loop = prof.runcall(infoCore, args.nebug, args)
        displayTrace(prof)
    else:
        if args.profile:
            print("Profiling functionality not available.")
        loop = infoCore(args.debug, args)

    loop.Run(args.command)
